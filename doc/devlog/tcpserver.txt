TCPServer设计论

	在早期版本中，TCPSocket派生出TCPClient,TCPServer,TCPAccept，其下TCPAccept再派生
出TCPAcceptPass。

	其实关系也不算复杂，必境用处不一样。TCPAccept/TCPAcceptPass对应服务器端接入后的连接。
而同时有了TCPAcceptManage，负责提供各种管理模式，来高度自动化的处理着Server端的连接。

	高度的封装和高度的自动化的确强大和易用，使这种设计着实辉煌了一阵子。然后由于深入的应用，
各种需求接连而来。TCPAcceptManage/TCPServer/TCPAccept类的内容开始丰富起来。

	经验再次推翻设计，在新的设计中:之前自认精彩的TCPAcceptManage/TCPAccept系列被砍掉。
取而代之的是全新的TCPSocket，其实它之是原先MSAcceptTeam的再改进型。

	为什么只是其中一种TCPAcceptManage取代了原先的设计呢？

	1.灵活性。原先的设计固然强大方便，但高度的封装和自动化也让其失去了一定的灵活性。在处理
复杂需求时，无法全盘照顾。

	2.开放性。同样由于原先的设计封装了过多的同容，让开发者无法了解其运行模式。而现今的小模
块话，让开发者可以轻易的了解其运行原理。

	3.易组合。这个缘于早期我对自己源代码过于保护造成的。在旧模式中，早期版本需要开发者必须
从TCPAccept派生自己的处理类，然而在某个项目中，需要两种处理机制，无法切换。于是被改成可以不
从TCPAccept派生。而在最新的版本中，充分利用了template的静多态化。只要类中有对应的函数即可
方便的嵌入。



//-----------------------------------------------------------------------------
// 早期版本日志
//-----------------------------------------------------------------------------

	TCPServer与TCPAcceptManage

	TCPServer负责socket的拉入处理，但其实很简单，就是一个accept。对接入后的socket管理全
部放在TCPAcceptManage的具体派生类中。

	对于一个简单的服务来讲，将TCPServer/TCPAcceptManage合并，将是最简单最合适的处理方案。
不需要任何多余的配置和代码，开发者可以将精力完全放在业务程序上。早先的TCPServer就是这样设计
的。

	然而，对于一个复杂业务的服务器来讲，很有可能我们需要在多种执行模式之间切换。比如在地图上，
本身每个玩家是独立操作的，我们为每个玩家分配一个线程，让其仅运行各自的业务。这时，它跑的是线
程阻塞模式。而当用户进入一个人数非常有限的可交互的房间时，我们又希望每个房间一个线程，以减轻
对服务器的线程压力。这时它跑的是非阻塞模式。

TCPSocket、TCPClient、TCPAccept、TCPAcceptPass

	早期版本的TCPClient/TCPAccept在当时自认完美，它也确实完美，但这只是针对当时的案例。在
那之后的一段日子里，由于客户的增加，随之带来的需求。TCP　Server端的设计发生了非常巨大的变化。

	阻塞与非阻塞，同步与非同步，流式与包式。我们对数据的处理方式多种多样，想一个类通吃所有显
然是不可能的。想针对每一种形式都编写特定的处理方式似乎有点道理，但仍不能适应千变万化的需求。
那么唯一的解决办法就是模块化，分离各个模块，由开发者自行组合。并提供一些预组合的解决方案。


