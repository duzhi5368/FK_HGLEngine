数据包的填充方式

	开发者在对复杂数据的传输入，经常需要将数据流式化。我们常用的方式大概可以写为以下三种：

首先是数据类型：

	uint32	id;
	wchar_t	name[32];
	bool	sex;
	uint16	age;
	char	url[128];


1.充分自适应化

	stream<<id<<name<<sex<<age<<url;
或：
	stream.write(id);
	stream.write(name);
	stream.write(sex);
	stream.write(age);
	stream.write(url);

	这样写起来，非常简单方便，充分利用了重载和模块自适应技术。
	但问题也在于自适应技术往往会带来意想不到的结果，而且同样的数据类型在不同的cpu或是os，或是compiler下，
往往会有不同的结果。


2.类型严格明示法

	stream.WriteUint32(id);
	stream.WriteUTF16LEString(name);
	stream.WriteBool(sex);
	stream.WriteUint16(age);
	stream.WriteUTF8String(url);

	这种写法常被用于要求高安全性的情况，由于明确的指定了每一个数据的类型，所以出错的可能性也大大降低。
	但相对第一种写法的完全<<化就显得非常麻烦。


3.结构体处理法

	__align(1)		//要求单字节对齐
	struct
	{
		uint32 	id;
		wchar_t	name[32];
		bool	sex;
		uint16	age;
		char	url[128];
	}info;

	stream.Write(&info,sizeof(info));

	这种写法看起来相当方便，虽然处理可变长度数据有点浪费，但大幅度减少了所需编写的代码。方便且高性能。
但存在的问题与自适应化一样，不同的环境下，结果可能不一样。



问题：

	1.高安全性
	2.高性能
	3.高度简洁性
	4.高度可移植性

	客户端程序的美妙之处在于，往往只需要关心一个平台，或是同一种OS或是同一种CPU。
	服务器端程序的美妙之处在于，需要适应的环境很少，很多时候可以自己开环境。

	如果是同一种环境，比如客户端用Windows x86+Microsoft C/C++(Visual C/C++)，那么情况非常好，尽可以
使用第三种方法，来简化程序的设计。

	但我们经常需要碰到的情况下是需要Windows x86+Microsoft C/C++为客户端，使用
Linux/FreeBSD+GNU C/C++为服务器端。Windows下wchar_t为UTF16LE，而Linux下为UTF32。如果同是X86还好，
GCC可以通过强制指定wchar_t类型为UTF16LE来解决。而最糟糕的情况在于某些大公司还不使用x86处理器，
比如中国电信使用PowerPC，而韩系和日系厂商有一部分使用SUN Sparc。而这些处理器都是BE编码，所以如果要保证代
码正常，仅能是指定为UTF16BE编码，虽然可以强制指定为UTF16LE，并再写一套代码兼容处理。但很明显这样会让程序
变的很低效以及麻烦。

	综上所述，要同时达到问题中所说的“四高”看来是不可能，出于安全性，似乎是只能牺牲第3项“高度简洁”。使用前方
所写的第2种办法。确实，很多高安全性要求的场合都要求程序员必须这样编写数据处理模块。再适当的做一些重定义，重
载。也可以模拟的如第一种方法那样简便。

	似乎问题就这样解决了，但这还有一点：如果输出的流为socket数据流，那么第三种方法在大部分情况下是
一次write即可完成操作。而第一种和第二种方法则是5次write。我们要知道这是一个从内存到网卡缓存，再发送的一个过
程。这涉及了复杂的应用层到操作系统层再到驱动层硬件层的转换，这个转换相当消耗系统资源。所以我们必须尽可能的减
少这种操作的次数。
